"""
Plotting functions for the 'users' and 'decision_time' dataframes from compute_results.py.

The plotting functions can be invoked directly from compute_results.py's __main__ function.

Running this module stand-alone will load the 'users' and 'decision_time' dataframes
from the Excel files outputted by compute_results.py.
"""

import os
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

sns.set_palette("pastel")
sns.set(font_scale=1.5)
# sns.set(rc={"font.size":12,"axes.titlesize":14,"axes.labelsize":12})
# sns.set(rc={"font.size":24,"axes.titlesize":24,"axes.labelsize":24})

PLOT_DIR = Path('plots')
if not os.path.exists(PLOT_DIR):
    os.makedirs(PLOT_DIR)


def _boxplot(df: pd.DataFrame, x: str, y: str, title: str = None, title_suffix: str = '', file_suffix: str = '',
             **kwargs) -> None:
    """
    Utility function for creating grouped box-and-whisker plots. Plots are
    saved to PLOT_DIR with an automatically-generated filename in PNG format.

    :param df: the source dataframe
    :param x: name of the column with groups
    :param y: name of the column to plot
    :param title: optional plot title, e.g., "Sensitivity"
    :param title_suffix: optional title suffix, e.g., "25th percentile removed"
    :param file_suffix: optional filename suffix, e.g., "25th percentile removed"
    :param kwargs: passthrough to seanborn plotting
    :return: None
    """
    if not title:
        title = y.title()
    if title_suffix:
        title_suffix = u' \u2014 ' + title_suffix
    ax = sns.boxplot(x=x, y=y, width=0.5, data=df)
    # Suppress figure title for APA7
    # ax.set_title(title + title_suffix)
    ax.set(**kwargs)
    plt.tight_layout()
    plt.savefig(PLOT_DIR / (x.replace(' ', '_') + '-' + y.replace(' ', '_') + file_suffix + ".png"))
    plt.show()


def plot_user_results(df):
    df['group'] = df['group'].astype({'group': 'str'}).map({'1': '50% FAR', '3': '86% FAR'})
    df['time on task percentile'] = df['25th percentile'].astype({'25th percentile': 'str'}).map(
        {'True': '25th%', 'False': 'Others'})
    max_time = max(df['time_on_task'])

    # Performance measures - whole group
    _boxplot(df, x="group", y="sensitivity", ylim=(-0.05, 1.05), xlabel='', ylabel='Sensitivity')
    _boxplot(df, x="group", y="specificity", ylim=(-0.05, 1.05), xlabel='', ylabel='Specificity')
    _boxplot(df, x="group", y="precision", ylim=(-0.05, 1.05), xlabel = '', ylabel='Precision')
    _boxplot(df, x="group", y="time_on_task", ylim=(-0.05, max_time + 1), ylabel="Total Time on Task (m)")

    # Performance measures - 25% vs rest
    # _boxplot(df, x='time on task percentile', y="sensitivity", ylim=(-0.05, 1.05), title_suffix='Time on Task effects')
    # _boxplot(df, x='time on task percentile', y="specificity", ylim=(-0.05, 1.05), title_suffix='Time on Task effects')
    # _boxplot(df, x='time on task percentile', y="precision", ylim=(-0.05, 1.05), title_suffix='Time on Task effects')
    # _boxplot(df, x='time on task percentile', y="time_on_task", ylim=(-0.05, max_time + 1),
    #          title='Time on Task (Minutes)')

    # Perf measure - 25% removed
    # print(df.groupby(['group', 'time on task percentile']).size())
    # df = df[df['time on task percentile'] == 'Others']
    #
    # _boxplot(df, x="group", y="sensitivity", ylim=(-0.05, 1.05), title_suffix='25th% removed',
    #          file_suffix='_25th_removed')
    # _boxplot(df, x="group", y="specificity", ylim=(-0.05, 1.05), title_suffix='25th% removed',
    #          file_suffix='_25th_removed')
    # _boxplot(df, x="group", y="precision", ylim=(-0.05, 1.05), title_suffix='25th% removed',
    #          file_suffix='_25th_removed')
    # _boxplot(df, x="group", y="time_on_task", ylim=(-0.05, max_time + 1), title_suffix='25th% removed',
    #          title='Time on Task (Minutes)', file_suffix='_25th_removed')
    #
    # print(df.head().to_string())


def plot_decision_time(df):
    df['mean'] = pd.to_timedelta(df['mean'], unit='day').dt.total_seconds()
    ax = sns.regplot(data=df.reset_index(), x='index', y='mean', lowess=True, line_kws={'color': 'red'})
    # Suppress title for APA7
    # ax.set_title("Mean Time to Make a Decision (s)")
    ax.set_xlabel("Order of Events")
    ax.set_ylabel("Mean Time to Decide (s)")
    plt.tight_layout()
    plt.savefig(PLOT_DIR / "event_decision_time.png")
    plt.show()


if __name__ == "__main__":
    # Runs off the Excel sheet generated by compute_results.py

    input_file = Path('excel') / "cry-wolf_20200125_14-35-09_patched_analysis.xlsx"
    users = pd.read_excel(input_file, sheet_name='users')
    plot_user_results(users)

    input_file = Path('excel') / "cry-wolf_20200125_14-35-09_patched_decision_time.xlsx"
    decision_times = pd.read_excel(input_file, sheet_name='event_decision_time')
    plot_decision_time(decision_times)
